#
request_hardware_status:
  sequence: 
  - service: mqtt.publish
    data: { topic: "ha/c/gs", payload: "all" }
  - service: mqtt.publish
    data: { topic: "cmnd/tasmotas/state", payload: "" }
#
restart_paradox:
  sequence: { service: shell_command.restart_paradox }
#
restart_axpert:
  sequence: { service: shell_command.restart_axpert }
#
send_ir_03:
  sequence: { service: mqtt.publish, data: { topic: "cmnd/blah/IRsend", payload: '{"Protocol":"NEC","Bits":32,"Data":"0x10EF08F7"}' } }
#
send_ir_04:
  sequence: 
  - service: switch.turn_on
    entity_id: switch.ir_samsung_power
  - service: mqtt.publish
    data: 
      topic: "cmnd/blah/IRsend"
      payload: '{"Protocol":"SAMSUNG","Bits":32,"Data":"0xE0E040BF"}'
#
wol_kodi:
  sequence: 
  - service: wake_on_lan.send_magic_packet
    data:
      mac: 50-46-5d-50-56-40
      broadcast_address: 192.168.25.255
#
update_speedtest:
  sequence: { service: speedtestdotnet.speedtest }
#
wakeup_light:
  sequence:
  - condition: template
    value_template: "{{ is_state('input_boolean.enable_wakeup_light', 'on') and state_attr('sun.sun', 'elevation') < 3 }}"
  - service: light.turn_on
    entity_id: light.kitchen_downlights
#
wakeup_radio:
  sequence:
  - condition: template
    value_template: "{{ is_state('input_boolean.enable_wakeup_radio', 'on') }}"
  - service: media_player.turn_on
    entity_id: media_player.jbl_speaker
  - service: media_player.volume_set
    data:
      entity_id: media_player.kitchen_mini
      volume_level: 0.35
  - service: media_player.volume_set
    data:
      entity_id: media_player.bedroom_mini
      volume_level: 0.20
  - service: media_player.volume_set
    data:
      entity_id: media_player.jbl_speaker
      volume_level: 0.35
  - service: script.stream_radio
#
stream_radio:
  sequence: 
  - service: media_player.play_media
    data: 
      entity_id: media_player.music
      media_content_id: "http://20853.live.streamtheworld.com/KFM_SC?DIST=TuneIn&TGT=TuneIn&maxServers=2&ua=RadioTime&ttag=RadioTime"
      media_content_type: "audio/mp4"
#
send_message:
  sequence:
  - service: script.send_message_kodi
    data_template:
      message: "{{ message }}"
  - condition: template
    value_template: "{{ not is_state('media_player.kodi', 'playing') }}"
  - service: telegram_bot.send_message
    data_template:
      target: "{{ target }}"
      message: "{{ message }}"
      disable_notification: "{{ disable_notification }}"
#
send_message_kodi:
  sequence:
  - condition: state
    entity_id: media_player.kodi
    state: playing
  - service: notify.kodi_lounge
    data_template:
      title: "Home-Assistant"
      message: "{{ message }}"
#
send_inverter_data:
  sequence:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "Solar Power: {{ states.sensor.axpert_pvw.state_with_unit }} \nCurrent Load: {{ states.sensor.axpert_outw.state_with_unit }} \nBattery Level: {{ states.sensor.axpert_battp.state_with_unit }} \nSun Elevation {{ states.sun.sun.attributes.elevation }}"
      disable_notification: true
################################################################################
#
garage_close_and_arm_alarm:
  sequence:
  - condition: template
    value_template: "{{ is_state('binary_sensor.door_contact_garage_double', 'on') }}"
  - service: script.garage_door_opener
  - wait_template: "{{ is_state('binary_sensor.door_contact_garage_double', 'off') }}"
    timeout: "00:01:00"
  - service: script.paradox_status_arm
  - service: logbook.log
    data:
      name: "*Garage Script*"
      message: "Close garage and Arm alarm"
#
garage_open_after_disarm_alarm:
  sequence:
  - condition: template
    value_template: "{{ is_state('binary_sensor.alarm_status', 'on') and is_state('binary_sensor.door_contact_garage_double', 'off') and is_state('input_boolean.garage_auto_opener', 'on') }}"
  - service: input_boolean.turn_off
    entity_id: input_boolean.garage_auto_opener
  - service: script.paradox_status_disarm
  - wait_template: "{{ is_state('binary_sensor.alarm_status', 'off') }}"
    timeout: "00:00:30"
  - service: script.garage_door_opener
  - service: logbook.log
    data:
      name: "*Garage Script*"
      message: "Disarm alarm and open garage"
#
garage_door_opener:
  sequence:
  - condition: template
    value_template: "{{ is_state('binary_sensor.alarm_status', 'off') or is_state('binary_sensor.door_contact_garage_double', 'on') }}"
  - service: mqtt.publish
    data:
      topic: "ha/c/t/d02-1"
      payload: "0"
#
################################################################################
light_timer_garage:
  sequence:
  - condition: template
    value_template: "{{ is_state('binary_sensor.alarm_status', 'off') and is_state('binary_sensor.door_contact_garage_double', 'off') }}"
  - service: timer.start
    data_template:
      entity_id: timer.garage_light
      duration: "{% if is_state('binary_sensor.door_contact_garage_single', 'on') %} 00:15:00 {% else %} 00:05:00 {% endif %}"
#
light_timer_bedroom:
  sequence:
  - condition: template
    value_template: "{{ state_attr('sun.sun', 'elevation') < 3 }}"
  - service: timer.start
    data:
      entity_id: timer.bedroom_light
      duration: "00:05:00"
#
light_timer_garden:
  sequence:
  - condition: template
    value_template: "{{ is_state('sun.sun', 'below_horizon') }}"
  - service: timer.start
    data:
      entity_id: timer.garden_light
      duration: "00:01:00"
#
################################################################################
paradox_status_arm:
  sequence: { service: mqtt.publish, data: { topic: "Paradox/C/P1", payload: "Arm" } }
#
paradox_status_stay:
  sequence: { service: mqtt.publish, data: { topic: "Paradox/C/P1", payload: "Stay" } }
#
paradox_status_disarm:
  sequence: { service: mqtt.publish, data: { topic: "Paradox/C/P1", payload: "Disarm" } }
#
paradox_alarm_notification:
  sequence:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_channel
      message: "*{{ message }}*"
  - delay: '00:00:04'
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_channel
      message: "Motion detected in these zones: {%- for item in states.binary_sensor -%}{%- if 'paradox_zone' in item.entity_id and (as_timestamp(now()) - as_timestamp(item.last_changed)) < 120 %}\n{{ item.name }}{% endif %}{%- endfor -%}"
  - service: logbook.log
    data_template:
      name: "{{ message }}"
      message: "Motion detected in these zones: {%- for item in states.binary_sensor -%}{%- if 'paradox_zone' in item.entity_id and (as_timestamp(now()) - as_timestamp(item.last_changed)) < 120 %}\n{{ item.name }}{% endif %}{%- endfor -%}"
      entity_id: binary_sensor.paradox_output_1
      domain: binary_sensor
################################################################################
axpert_set_defaults:
  sequence: 
  - service: mqtt.publish
    data: { topic: "axpert/info/pigs", payload: '{"pvA": 0, "outP": 0, "sccBattV": 0, "outW": 0, "outV": 0, "pvVa": 0, "inV": 0, "inHz": 0, "count": 0, "charge_ac": 0, "battP": 0, "battAi": 0, "pvW": 0, "outHz": 0, "charge_scc": 0, "battAo": 0, "outVa": 0, "on_solar": 0, "pvV": 0, "battV": 0, "temp": 0, "charging": 0}' }
#
axpert_change_source_grid:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "POP00" } }
#
axpert_change_source_solar:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "POP01" } }
#
axpert_change_source_sbu:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "POP02" } }
#
axpert_query_piri:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "QPIRI" } }
#
################################################################################
axpert_charge_source_grid:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "PCP00" } }
#
axpert_charge_source_solar:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "PCP01" } }
#
axpert_charge_source_both:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "PCP02" } }
#
axpert_charge_source_solar_only:
  sequence: { service: mqtt.publish, data: { topic: "axpert/comm", payload: "PCP03" } }
#
################################################################################
node_restart_all:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "all" } }
#
node_restart_rb01:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "da42ed" } }
#
node_restart_rb02:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "1662c9" } }
#
node_restart_rb03:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "1661c6" } }
#
node_restart_sw01:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "06d27f" } }
#
node_restart_sw02:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "d3af73" } }
#
node_restart_sw03:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "1719df" } }
#
node_restart_sw04:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "06c89a" } }
#
node_restart_dev01:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "e5ec2e" } }
#
node_restart_dev02:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "167243" } }
#
node_restart_dev03:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "07162e" } }
#
node_restart_dev04:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "06607b" } }
#
node_restart_dev05:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "18693b" } }
#
node_restart_dev06:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "3a565e" } }
#
node_restart_dev07:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "3362f8" } }
#
node_restart_dev09:
  sequence: { service: mqtt.publish, data: { topic: "ha/c/esp/restart", payload: "06c98d" } }
#