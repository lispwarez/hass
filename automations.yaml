#########################################################################################################
- alias: homeassistant_startup
  initial_state: true
  trigger:
  - platform: homeassistant
    event: start
  action:
  - service: script.request_hardware_status
  - service: script.axpert_query_piri
#
- alias: new_day_resets
  initial_state: true
  trigger:
    platform: time
    at: "00:00:01"
  action:
  - service: automation.turn_on
    entity_id: automation.axpert_change_to_solar
  - service: automation.turn_on
    entity_id: automation.pool_pump_on_for_conditions
  - service: input_boolean.turn_off
    entity_id: input_boolean.pool_override
#
- alias: end_of_hour_actions
  initial_state: true
  trigger:
    platform: time_pattern
    minutes: 59
    seconds: 56
  action:
  - service: mqtt.publish
    data_template:
      topic: "ha/internal/stats_power_output_hourly"
      payload: "{{ state_attr('sensor.axpert_power_output', now().hour|string)|round(2) }}"
  - service: mqtt.publish
    data_template:
      topic: "ha/internal/stats_power_solar_hourly"
      payload: "{{ state_attr('sensor.axpert_power_solar', now().hour|string)|round(2) }}"
#
- alias: end_of_day_actions
  initial_state: true
  trigger:
    platform: time
    at: "23:59:58"
  action:
  - service: mqtt.publish
    data_template:
      topic: "ha/internal/stats_poolpump_duration"
      payload: "{{ states('sensor.poolpump_duration_today') }}"
  - service: mqtt.publish
    data_template:
      topic: "ha/internal/stats_power_output"
      payload: "{{ states('sensor.axpert_power_output') }}"
  - service: mqtt.publish
    data_template:
      topic: "ha/internal/stats_power_solar"
      payload: "{{ states('sensor.axpert_power_solar') }}"
#
################################################
#
- alias: not_home_turn_things_off
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.someone_home
    to: "off"
  action:
  - service: media_player.turn_off
    entity_id: media_player.jbl_speaker
  - service: media_player.turn_off
    entity_id: media_player.kitchen_mini
  - service: media_player.turn_off
    entity_id: media_player.bedroom_mini
  - service: media_player.turn_off
    entity_id: media_player.lounge_chromecast
  - service: media_player.turn_off
    entity_id: media_player.lounge_samsung
  - service: media_player.turn_off
    entity_id: media_player.kodi
#
- alias: play_radio_when_arriving_home
  initial_state: true
  trigger:
  - platform: state
    entity_id: group.tracked_things
    to: "home"
  action:
  - service: script.stream_radio
#
################################################
#
- alias: bedtime_activated
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.bedtime_mode
    to: "on"
  action:
  - service: homeassistant.turn_off
    data_template:
      entity_id: >
        {% set ignored_entities = ['light.house_lights','light.outside','light.front_door','switch.smart_plug_1','switch.smart_plug_2'] %}
        {{ (states.light|list + states.switch|list + states.media_player|list) | rejectattr('state','in',['off','idle','unavailable']) | map(attribute='entity_id') | reject('in',ignored_entities) | join(', ') }}
#
- alias: bedtime_disable
  initial_state: true
  trigger:
  - platform: state
    entity_id: input_boolean.bedtime_mode
    to: "off"
  condition:
  - condition: state
    entity_id: sun.sun
    state: "below_horizon"
  action:
  - service: light.turn_on
    entity_id: light.kitchen_downlights
#
- alias: bedtime_auto_disable
  initial_state: true
  trigger:
  - platform: state
    entity_id: device_tracker.lisp_cell
    to: "home"
  condition:
  - condition: state
    entity_id: input_boolean.bedtime_mode
    state: "on"
  action:
  - service: input_boolean.turn_off
    entity_id: input_boolean.bedtime_mode
#
################################################
#
- alias: internet_ip_changed
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.myip
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.telegram_notifications', 'on') and states('sensor.myip') not in ['unknown','unavailable'] }}"
  action:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "IP address has changed. New IP is {{ states('sensor.myip') }}"
#
- alias: speedtest_results
  initial_state: true
  trigger:
    platform: numeric_state
    entity_id: 
    - sensor.speedtest_download
    - sensor.speedtest_upload
    below: 48
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.telegram_notifications', 'on') and as_timestamp(now()) - as_timestamp(states.automation.speedtest_results.last_changed) > 10 }}"
  action:
  - delay: '00:00:02'
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "*Speedtest results:* Download {{ states.sensor.speedtest_download.state_with_unit }} Upload: {{ states.sensor.speedtest_upload.state_with_unit }}"
#
################################################
#
- alias: tv_mode_play
  initial_state: true
  trigger:
  - platform: state
    entity_id: media_player.kodi
    to: "playing"
  condition:
  - condition: state
    entity_id: sun.sun
    state: "below_horizon"
  - condition: state
    entity_id: input_boolean.enable_tv_mode
    state: "on"
  action:
  - service: light.turn_on
    entity_id: light.dining_room
  - service: light.turn_off
    entity_id: light.scullary
  - service: light.turn_off
    entity_id: light.kitchen
  - service: light.turn_off
    entity_id: light.kitchen_downlights
#
- alias: tv_mode_idle
  initial_state: true
  trigger:
  - platform: state
    entity_id: media_player.kodi
    from: "playing"
  condition:
  - condition: state
    entity_id: sun.sun
    state: "below_horizon"
  - condition: state
    entity_id: input_boolean.enable_tv_mode
    state: "on"
  action:
  - service: light.turn_off
    entity_id: light.dining_room
  - service: light.turn_on
    entity_id: light.kitchen_downlights
#
- alias: kodi_playing_stop_other_players
  initial_state: true
  trigger:
  - platform: state
    entity_id: media_player.kodi
    to: "playing"
  condition:
  - condition: template
    value_template: "{{ is_state('media_player.jbl_speaker', 'playing') or is_state('media_player.kitchen_mini', 'playing') or is_state('media_player.bedroom_mini', 'playing') }}"
  action:
  - service: media_player.turn_off
    entity_id: media_player.kitchen_mini
  - service: media_player.turn_off
    entity_id: media_player.bedroom_mini
  - service: media_player.turn_off
    entity_id: media_player.jbl_speaker
  - service: media_player.turn_off
    entity_id: media_player.lounge_chromecast
#
#- alias: kodi_request_turn_on
#  initial_state: true
#  trigger:
#  - platform: device
#    domain: kodi
#    entity_id: media_player.kodi
#    type: turn_on
#  action:
#  - service: wake_on_lan.send_magic_packet
#    data:
#      mac: 50-46-5d-50-56-40
#      broadcast_address: 192.168.25.255
#
#- alias: kodi_request_turn_off
#  trigger:
#  - platform: device
#    domain: kodi
#    entity_id: media_player.kodi
#    type: turn_off
#  action:
#  - service: kodi.call_method
#    data:
#      entity_id: media_player.kodi
#      method: System.Shutdown
#
- alias: kodi_turned_on
  initial_state: true
  trigger:
  - platform: state
    entity_id: media_player.kodi
    from: "off"
  condition:
  - condition: state
    entity_id: media_player.lounge_samsung
    state: "off"
  action:
  - service: script.send_ir_03
  - service: script.send_ir_04
#
- alias: kodi_turned_off
  initial_state: true
  trigger:
  - platform: state
    entity_id: media_player.kodi
    to: "off"
  condition:
  - condition: template
    value_template: "{{ not is_state('media_player.lounge_samsung', 'playing') and not is_state('media_player.lounge_chromecast', 'playing') }}"
  action:
  - service: script.send_ir_03
  - service: media_player.turn_off
    entity_id: media_player.lounge_samsung
#########################################################################################################
################### Device Tracking ######################
- alias: new_device_found_on_wifi
  initial_state: true
  trigger: 
  - platform: event
    event_type: device_tracker_new_device
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "New device found on the network Hostname: {{trigger.event.data.host_name}} <br /> Entity: {{trigger.event.data.entity_id}} <br /> MAC: {{ trigger.event.data.mac }}"
      parse_mode: html
  - service: persistent_notification.create
    data_template:
      title: "Device Tracker Found New Device"
      message: "Hostname: {{trigger.event.data.host_name}} \n Entity: {{trigger.event.data.entity_id}} \n MAC: {{ trigger.event.data.mac }}"
#
- alias: node_tracker_offline
  initial_state: true
  trigger:
    platform: state
    entity_id:
    - sensor.node_up_rb01
    - sensor.node_up_rb02
    - sensor.node_up_rb03
    - sensor.node_up_sw01
    - sensor.node_up_sw02
    - sensor.node_up_sw03
    - sensor.node_up_sw04
    - sensor.node_up_dev01
    - sensor.node_up_dev02
    - sensor.node_up_dev03
    - sensor.node_up_dev04
    - sensor.node_up_dev05
    - sensor.node_up_dev06
    - sensor.node_up_dev09
    to: "unavailable"
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
    service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "{{ trigger.from_state.attributes.friendly_name }} has gone offline after {{ trigger.from_state.state }} minutes"
#
- alias: node_tracker_online
  initial_state: true
  trigger:
    platform: state
    entity_id:
    - sensor.node_up_rb01
    - sensor.node_up_rb02
    - sensor.node_up_rb03
    - sensor.node_up_sw01
    - sensor.node_up_sw02
    - sensor.node_up_sw03
    - sensor.node_up_sw04
    - sensor.node_up_dev01
    - sensor.node_up_dev02
    - sensor.node_up_dev03
    - sensor.node_up_dev04
    - sensor.node_up_dev05
    - sensor.node_up_dev06
    - sensor.node_up_dev09
    from: "unavailable"
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
    service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "{{ trigger.from_state.attributes.friendly_name }} back online. Uptime: {{ trigger.to_state.state }} minutes"
#
#########################################################################################################
################### Inverter / UPS Stuff ######################
#
- alias: axpert_changeover_from_weather
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ states('weather.openweathermap') in ['cloudy','rainy','pouring','sunny','partlycloudy'] }}"
  - platform: state
    entity_id: binary_sensor.axpert_has_solar
    to: "on"
  condition:
  - condition: state
    entity_id: binary_sensor.axpert_has_solar
    state: "on"
  action:
  - service_template: automation.turn_{{ 'on' if states('weather.openweathermap') in ['sunny','partlycloudy'] else 'off' }}
    entity_id: automation.axpert_change_to_solar
#
- alias: axpert_pi_not_updating
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.axpert_outw
    to: "unknown"
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "No data detected from Inverter"
#
- alias: axpert_solar_fuse_blown
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.axpert_has_solar
    to: "off"
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.telegram_notifications', 'on') and state_attr('sun.sun', 'elevation') > 5 }}"
  action:
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "It seems the PV fuse has blown"
#
- alias: axpert_system_power_overload
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: sensor.axpert_outp
    above: 99
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "System Overload! Using {{ states.sensor.axpert_outw.state_with_unit }}"
#
- alias: axpert_source_changed
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.axpert_output_source
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "Inverter source changed to: {{ states('sensor.axpert_output_source') }}"
#
- alias: axpert_change_to_solar
  trigger: 
  - platform: time_pattern
    minutes: /2
  condition:
  - condition: template
    value_template: >-
      {{ is_state('binary_sensor.axpert_has_solar', 'on') and is_state('sensor.axpert_output_source', 'Grid') and 
      not ((state_attr('sun.sun', 'elevation') < 25 and state_attr('sun.sun', 'azimuth') > 33) and is_state_attr('sun.sun', 'rising', true)) and 
      not (state_attr('sun.sun', 'elevation') < 14 and is_state_attr('sun.sun', 'rising', false)) and
      states('sensor.axpert_battp') | int > 90 and states('sensor.axpert_outw') | int < 1800 and
      (now().timestamp() - as_timestamp(states.sensor.axpert_output_source.last_changed)) >= 900 }}
  action:
  - service: script.axpert_change_source_solar
#
- alias: axpert_change_to_grid_0
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.axpert_has_solar
    to: "off"
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.power_warning', 'off') and not is_state('sensor.axpert_output_source', 'Grid') and states('sensor.uptime') | int > 1 }}"
  action:
  - service: script.axpert_change_source_grid
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "Inverter change to Grid due to no solar input"
      disable_notification: true
  - service: script.send_inverter_data
#
- alias: axpert_change_to_grid_1
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: sensor.axpert_battp
    below: 75
    for: '00:01:00'
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.power_warning', 'off') and is_state('binary_sensor.axpert_output_source_is_grid', 'off') and states('sensor.uptime') | int > 1 }}"
  action:
  - service: script.axpert_change_source_grid
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "Setting inverter source to Grid due to battery below 75%"
      disable_notification: true
  - service: script.send_inverter_data
#
- alias: axpert_change_to_grid_2
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ is_state('binary_sensor.solar_below_cutoff', 'on') and states('sensor.axpert_outw') | int > states('sensor.axpert_pvw') | int }}"
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.power_warning', 'off') and is_state('binary_sensor.axpert_output_source_is_grid', 'off') and states('sensor.uptime') | int > 1 }}"
  action:
  - service: script.axpert_change_source_grid
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "Setting inverter source to Grid due to low solar power"
      disable_notification: true
  - service: script.send_inverter_data
#
- alias: axpert_change_to_grid_3
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: sensor.axpert_battdischargea
    above: 0
    for: '00:01:20'
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.power_warning', 'off') and is_state('binary_sensor.axpert_output_source_is_grid', 'off') and states('sensor.uptime') | int > 1 }}"
  action:
  - service: script.axpert_change_source_grid
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "Setting inverter source to Grid due to prolonged battery usage"
      disable_notification: true
  - service: script.send_inverter_data
#
- alias: axpert_change_to_grid_4
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ states('sensor.axpert_outw') | int > states('sensor.axpert_pvw') | int }}"
    for: '00:01:30'
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.power_warning', 'off') and is_state('binary_sensor.axpert_output_source_is_grid', 'off') and states('sensor.uptime') | int > 1 }}"
  action:
  - service: script.axpert_change_source_grid
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "Setting inverter source to Grid due to using more power than solar"
      disable_notification: true
  - service: script.send_inverter_data
#
- alias: axpert_charge_source_to_solar_only
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ is_state('sun.sun', 'above_horizon') and is_state('binary_sensor.axpert_has_solar', 'on') }}"
  action:
  - service: script.axpert_charge_source_solar
#
- alias: axpert_charge_source_to_solar_grid
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ is_state('sun.sun', 'below_horizon') or is_state('binary_sensor.axpert_has_solar', 'off') }}"
  - platform: numeric_state
    entity_id: sensor.axpert_pvw
    below: 50
    for: '00:00:30'
  condition:
    condition: template
    value_template: "{{ is_state_attr('sun.sun', 'rising', false) }}"
  action:
  - service: script.axpert_charge_source_both
#
- alias: axpert_bad_power_from_grid
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.power_warning
    to: "on"
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
    service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "*Bad power from grid* \nCurrent Voltage: {{ states.sensor.axpert_inv.state_with_unit }} \nSolar Power: {{ states.sensor.axpert_pvw.state_with_unit }} \nCurrent Load: {{ states.sensor.axpert_outw.state_with_unit }}"
#
- alias: prepaid_meter_reading_update
  initial_state: true
  trigger:
  - platform: state
    entity_id: sensor.prepaid_power_reading
  condition:
    condition: numeric_state
    entity_id: sensor.prepaid_power_reading
    above: 0
  action:
    service: shell_command.power_reading
    data_template: 
      reading: "{{ states('sensor.prepaid_power_reading') }}"
    
#########################################################################################################
################### Pool Stuff ######################
#
- alias: pool_pump_not_on_today
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.poolpump_working_time
    to: "on"
  condition:
  - condition: state
    entity_id: automation.pool_pump_on_for_conditions
    state: "off"
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "Pool pump not enabled today?"
#
- alias: pool_pump_turned_off
  initial_state: true
  trigger:
  - platform: state
    entity_id: switch.pool_pump
    to: "off"
  action:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: >-
        {% set seconds = now().timestamp() - as_timestamp(trigger.from_state.last_changed) %}
        Pool pump was running for {% if seconds > 60 %}{{ (seconds/60)|int }} minutes{% else %}{{ seconds|int }} seconds{% endif %}
      disable_notification: true
#
- alias: pool_pump_on_for_conditions
  trigger:
  - platform: time_pattern
    minutes: '/2'
  condition:
  - condition: template
    value_template: >-
      {{ is_state('switch.pool_pump', 'off') and is_state('binary_sensor.poolpump_working_time', 'on') and 
      is_state('binary_sensor.axpert_output_source_is_grid', 'off') and 
      is_state('sensor.axpert_battdischargea', '0') and states('sensor.axpert_outw') | int < 800 and 
      (now().timestamp() - as_timestamp(states.switch.pool_pump.last_changed)) > 240  }}
  action:
  - service: switch.turn_on
    entity_id: switch.pool_pump
#
- alias: pool_pump_off_if_conditions_1
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.axpert_has_solar
    to: "off"
  - platform: state
    entity_id: sensor.axpert_pvw
    to: "0"
  - platform: state
    entity_id: binary_sensor.axpert_output_source_is_grid
    to: "on"
    for: 00:00:05
  condition:
  - condition: template
    value_template: "{{ is_state('switch.pool_pump', 'on') and is_state('input_boolean.pool_override', 'off') }}"
  action:
  - service: switch.turn_off
    entity_id: switch.pool_pump
  - service: logbook.log
    data:
      name: "Pool Pump Off"
      message: "No longer on solar power"
      entity_id: switch.pool_pump
      domain: switch
#
- alias: pool_pump_off_if_conditions_2
  initial_state: true
  trigger:
  - platform: numeric_state
    entity_id: sensor.axpert_outw
    above: 1800
    for: 00:00:05
  - platform: template
    value_template: "{{ states('sensor.axpert_outw') | int > states('sensor.axpert_pvw') | int }}"
    for: 00:00:30
  condition:
  - condition: template
    value_template: "{{ is_state('switch.pool_pump', 'on') and is_state('input_boolean.pool_override', 'off') }}"
  action:
  - service: switch.turn_off
    entity_id: switch.pool_pump
  - service: logbook.log
    data:
      name: "Pool Pump Off"
      message: "Power usage too high"
      entity_id: switch.pool_pump
      domain: switch
#
- alias: pool_pump_off_if_conditions_3
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ is_state('binary_sensor.solar_below_800', 'on') and states('sensor.axpert_outw') | int > states('sensor.axpert_pvw') | int }}"
  condition:
  - condition: template
    value_template: "{{ states('sensor.poolpump_duration_now') | int > 0 and is_state('input_boolean.pool_override', 'off') }}"
  action:
  - service: switch.turn_off
    entity_id: switch.pool_pump
  - service: logbook.log
    data:
      name: "Pool Pump Off"
      message: "Solar below 800"
      entity_id: switch.pool_pump
      domain: switch
#
- alias: pool_pump_off_if_conditions_4
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ states('sensor.axpert_battdischargea') | int > 0 }}"
    for: 00:00:30
  condition:
  - condition: template
    value_template: "{{ is_state('switch.pool_pump', 'on') and is_state('input_boolean.pool_override', 'off') }}"
  action:
  - service: switch.turn_off
    entity_id: switch.pool_pump
  - service: logbook.log
    data:
      name: "Pool Pump Off"
      message: "Using battery too long"
      entity_id: switch.pool_pump
      domain: switch
#
- alias: pool_light_off_by_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: light.pool
    to: "on"
    for:
      minutes: 30
  condition:
  - condition: state
    entity_id: binary_sensor.zones_idle
    state: "on"
  action:
  - service: light.turn_off
    entity_id: light.pool
#
- alias: pool_light_off_by_zone_idle
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.zones_idle
    to: "on"
  condition:
  - condition: state
    entity_id: light.pool
    state: "on"
  action:
  - service: light.turn_off
    entity_id: light.pool
#
#########################################################################################################
################### Alarm Stuff ######################
#
- alias: paradox_stay_mode_activated
  initial_state: true
  trigger: { platform: mqtt, topic: "Paradox/Events", payload: "Event:Non-reportable event;SubEvent:Arm in stay mode" }
  action:
  - service: input_boolean.turn_on
    entity_id: input_boolean.alarm_mode_stay
#
- alias: paradox_alarm_status_clear
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.alarm_status
    to: "off"
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.alarm_mode_stay
#
- alias: notify_alarm_status
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.alarm_status
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
  - service: telegram_bot.send_message
    data_template:
      target: !secret telegram_userid_1
      message: "*Alarm status:* {%- if is_state('binary_sensor.alarm_status', 'on') %} Armed {%- else %} Disarmed {%- endif %}"
#
- alias: notify_alarm_armed_while_door_open
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.doors_open_when_armed
    to: "on"
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "*Entrance doors open and alarm armed!*"
#
###### Alerts Channel
- alias: paradox_state_alarming
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.paradox_output_1
    to: "on"
  action:
  - service: script.paradox_alarm_notification
    data:
      message: "Alarm is going off!"
###### Alerts Channel
- alias: paradox_state_panicing
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.paradox_output_2
    to: "on"
  action:
  - service: script.paradox_alarm_notification
    data:
      message: "Alarm is Panic state!"
###### </alerts>
- alias: paradox_auto_set_alarm
  trigger:
  - platform: state
    entity_id: binary_sensor.zones_idle
    to: "on"
  - platform: state
    entity_id: binary_sensor.someone_home
    to: "off"
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.alarm_status', 'off') and is_state('binary_sensor.door_contact_garage_single', 'off') }}"
  action:
  - service_template: script.{{ 'paradox_status_stay' if is_state('binary_sensor.someone_home', 'on') else 'paradox_status_arm' }}
#
- alias: send_image_on_motion_garden
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.garden_line_crossing
    to: "on"
  - platform: state
    entity_id: binary_sensor.paradox_zone_16
    to: "on"
  condition:
  - condition: state
    entity_id: binary_sensor.alarm_status
    state: "on"
  action:
  - service: script.light_timer_garden
  - service: shell_command.kodi_pip_garden
  - delay: "{{ '00:00:02' if is_state('sun.sun', 'below_horizon') else '00:00' }}"
  - service: telegram_bot.send_photo
    data:
      target: !secret telegram_userid_1
      url: http://192.168.25.31/ISAPI/Streaming/channels/1/picture
      username: !secret hikvision_username
      password: !secret hikvision_password
#
- alias: send_image_on_motion_driveway
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.driveway_line_crossing
    to: "on"
  condition:
  - condition: state
    entity_id: 
    - input_boolean.garage_auto_opener
    - binary_sensor.door_contact_garage_double
    state: "off"
  action:
  - service: telegram_bot.send_photo
    data:
      target: !secret telegram_userid_1
      url: http://192.168.25.32/ISAPI/Streaming/channels/1/picture
      username: !secret hikvision_username
      password: !secret hikvision_password
#
- alias: send_image_on_motion_lounge
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.paradox_zone_14
    to: "on"
  condition:
  - condition: state
    entity_id: sensor.alarm_arm_mode
    state: "Armed"
  action:
  - service: telegram_bot.send_photo
    data:
      target: !secret telegram_userid_1
      url: http://192.168.25.22/image/jpeg.cgi
      username: admin
      password: !secret camera_password
#
- alias: send_image_on_motion_garage
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.paradox_zone_15
    to: "on"
  condition:
  - condition: state
    entity_id: sensor.alarm_arm_mode
    state: "Armed"
  action:
  - service: telegram_bot.send_photo
    data:
      target: !secret telegram_userid_1
      url: http://192.168.25.21/image/jpeg.cgi
      username: admin
      password: !secret camera_password
#
- alias: toggle_garage_door_from_paradox
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.paradox_output_4
    to: "on"
  action:
  - service: script.garage_door_opener
#
- alias: garage_auto_open_when_arriving_home
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.driveway_line_crossing
    to: "on"
  - platform: state
    entity_id: input_boolean.garage_auto_opener
    to: "on"
  condition:
  - condition: template
    value_template: "{{ is_state('input_boolean.garage_auto_opener', 'on') and (as_timestamp(now()) - as_timestamp(states.binary_sensor.driveway_line_crossing.last_changed)) < 60 }}"
  action:
  - service: script.garage_open_after_disarm_alarm
#
- alias: garage_auto_opener_reset
  initial_state: true
  trigger:
    platform: state
    entity_id: input_boolean.garage_auto_opener
    to: "on"
    for:
      minutes: 1
  action:
    service: input_boolean.turn_off
    entity_id: input_boolean.garage_auto_opener
#
#########################################################################################################
################### Lights Stuff ######################
- alias: garage_light_on_from_motion
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.paradox_zone_15
    to: "on"
  action:
  - service: script.light_timer_garage
#
- alias: garage_light_on_from_single_door
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.door_contact_garage_single
  action:
  - service: script.light_timer_garage
#
- alias: garage_light_on_from_double_door_close
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.door_contact_garage_double
    to: "off"
  action:
  - service: script.light_timer_garage
#
- alias: garage_light_off_from_double_door_open
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.door_contact_garage_double
    to: "on"
  action:
    service: timer.cancel
    entity_id: timer.garage_light
#
- alias: garage_light_off_from_alarm_armed
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.alarm_status
    to: "on"
  action:
    service: timer.cancel
    entity_id: timer.garage_light
#
- alias: garage_light_on_from_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: timer.garage_light
    to: "active"
  condition:
  - condition: state
    entity_id: light.garage
    state: "off"
  action:
    service: light.turn_on
    entity_id: light.garage
#
- alias: garage_light_off_from_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: timer.garage_light
    to: "idle"
  condition:
  - condition: state
    entity_id: light.garage
    state: "on"
  action:
    service: light.turn_off
    entity_id: light.garage
#
- alias: garage_light_off_cancel_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: light.garage
    to: "off"
  condition:
  - condition: template
    value_template: "{{ not is_state('timer.garage_light', 'idle') }}"
  action:
    service: timer.cancel
    entity_id: timer.garage_light
#
################################################
#
- alias: someone_got_home_turn_on_lights
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.door_contact_garage_single
    to: "on"
  condition:
  - condition: template
    value_template: "{{ is_state('binary_sensor.alarm_status', 'off') and state_attr('sun.sun', 'elevation') < 3 and (as_timestamp(now()) - as_timestamp(states.binary_sensor.door_contact_garage_double.last_changed)) | int < 300 }}"
  action:
  - service: light.turn_on
    entity_id: light.entrance
  - service: light.turn_on
    entity_id: light.kitchen_downlights
#
- alias: someone_is_home_turn_on_lights
  initial_state: true
  trigger:
  - platform: template
    value_template: "{{ state_attr('sun.sun', 'elevation') < 3 and is_state('binary_sensor.someone_home', 'on') }}"
  action:
  - service: light.turn_on
    entity_id: light.kitchen_downlights
#
- alias: morning_wakeup_alarm
  initial_state: true
  trigger:
  - platform: time
    at: input_datetime.morning_wakeup_time
#  - platform: template
#    value_template: "{{ states('sensor.time') == states('input_datetime.morning_wakeup_time')[0:5] }}"
  condition:
  - condition: template
    value_template: "{{ (is_state('input_boolean.enable_wakeup_workdays', 'on') and is_state('binary_sensor.workday_sensor', 'on')) or is_state('input_boolean.enable_wakeup_workdays', 'off') }}"
  - condition: template
    value_template: "{{ is_state('input_boolean.enable_wakeup_light', 'on') or is_state('input_boolean.enable_wakeup_radio', 'on') }}"
  action: 
  - service: script.wakeup_radio
  - service: script.wakeup_light
  - service: input_boolean.turn_off
    entity_id: input_boolean.bedtime_mode
#
- alias: outside_lights_on_at_night
  initial_state: true
  trigger:
  - platform: state
    entity_id: sun.sun
    to: "below_horizon"
  action:
  - service: light.turn_on
    entity_id: light.front_door
#
- alias: outside_lights_off_in_morning
  initial_state: true
  trigger:
  - platform: state
    entity_id: sun.sun
    to: "above_horizon"
  action:
  - service: light.turn_off
    entity_id: light.outside
#
- alias: check_if_lights_left_on
  initial_state: true
  trigger:
  - platform: time_pattern
    minutes: "/10"
  - platform: state
    entity_id: binary_sensor.someone_home
    to: "off"
  condition:
  - condition: template
    value_template: "{{ is_state('sun.sun', 'above_horizon') and is_state('binary_sensor.someone_home', 'off') and is_state('light.house_lights', 'on') }}"
  action:
  - service: light.turn_off
    entity_id: light.house_lights
  - service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "All lights off"
      disable_notification: true
#
- alias: bedroom_timer_on_from_motion
  initial_state: true
  trigger:
  - platform: state
    entity_id: binary_sensor.paradox_zone_01
    to: "on"
  condition:
  - condition: template
    value_template: "{{ is_state('input_boolean.bedtime_mode', 'off') and is_state('light.bedroom', 'off') }}"
  action: 
  - service: script.light_timer_bedroom
#
- alias: bedroom_lamp_on_from_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: timer.bedroom_light
    to: "active"
  action:
    service: light.turn_on
    entity_id: light.bed_lamp
#
- alias: bedroom_lamp_off_from_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: timer.bedroom_light
    to: "idle"
  action:
    service: light.turn_off
    entity_id: light.bed_lamp
#
- alias: bedroom_lamp_off_light_on
  initial_state: true
  trigger:
  - platform: state
    entity_id: light.bedroom
    to: "on"
  action:
    service: timer.cancel
    entity_id: timer.bedroom_light
#
- alias: garden_light_on_from_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: timer.garden_light
    to: "active"
  action:
  - service: light.turn_on
    entity_id: light.garden
#
- alias: garden_light_off_from_timer
  initial_state: true
  trigger:
  - platform: state
    entity_id: timer.garden_light
    to: "idle"
  action:
  - service: light.turn_off
    entity_id: light.garden
#
#########################################################################################################
################### Device Timers ######################
#
- alias: geyser_on_from_set_time
  trigger:
  - platform: time
    at: input_datetime.geyser_on_time
#  - platform: template
#    value_template: "{{ states('sensor.time') == states('input_datetime.geyser_on_time')[0:5] }}"
  condition:
  - condition: template
    value_template: "{{ (is_state('input_boolean.timer_geyser_workdays', 'on') and is_state('binary_sensor.workday_sensor', 'on')) or is_state('input_boolean.timer_geyser_workdays', 'off') }}"
  action:
  - service: switch.turn_on
    entity_id: switch.geyser
#
- alias: geyser_off_from_timer
  initial_state: true
  trigger:
  - platform: template 
    value_template: "{{ states('sensor.geyser_duration_now') | int >= states('input_number.geyser_duration') | int }}"
  action:
  - service: switch.turn_off
    entity_id: switch.geyser
#
#########################################################################################################
#
- alias: motion_in_driveway_ring_doorbell
  initial_state: true
  trigger:
    platform: state
    entity_id: binary_sensor.driveway_line_crossing
    to: "on"
  condition:
  - condition: state
    entity_id: binary_sensor.someone_home
    state: "on"
  - condition: state
    entity_id: input_boolean.bedtime_mode
    state: "off"
  action:
  - service: shell_command.kodi_pip_driveway
  - service: media_player.play_media
    data:
      entity_id: media_player.kitchen_mini
      media_content_id: 'http://192.168.25.5/doorbell.mp3'
      media_content_type: music
#
#########################################################################################################
#
- alias: notify_morning_sunrise_time
  initial_state: true
  trigger:
    platform: sun
    event: sunset
  condition:
  - condition: state
    entity_id: binary_sensor.telegram_notifications
    state: "on"
  action:
    service: telegram_bot.send_message
    data:
      target: !secret telegram_userid_1
      message: "Sunrise will be at {{ as_timestamp(states.sun.sun.attributes.next_rising)|timestamp_custom('%H:%M') }}"
      disable_notification: true
#
#########################################################################################################
################### Telegram BOT ######################
- alias: telegram_notifications_reset
  initial_state: true
  trigger:
    platform: state
    entity_id: input_boolean.notification_telegram
    to: "off"
    for:
      minutes: 5
  action:
    service: input_boolean.turn_on
    entity_id: input_boolean.notification_telegram
#
- alias: telegram_bot_start
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/start"
  action:
  - service: telegram_bot.send_message
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      message: "Hi {{ trigger.event.data.from_first }} {{ trigger.event.data.from_last }} \nYour user id is {{ trigger.event.data.user_id }} \nTo get started type /help"
#
- alias: telegram_bot_options
  initial_state: true
  trigger:
  - platform: event
    event_type: telegram_command
    event_data:
      command: '/help'
  action:
  - service: telegram_bot.send_message
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      message: "Some buttons for you"
      inline_keyboard:
      - "Garden Camera:/cam2, Driveway Camera:/cam3"
      - "Inside Camera:/cam1, Garage:/cam4"
      - "Output from Grid:/invertersetgrid, Output from Solar:/invertersetsolar"
      - "Charge Grid:/chargegrid, Charge Solar First:/chargesolarfirst"
      - "Charge Both:/chargeboth, Charge Solar Only:/chargesolaronly"
      - "Arm:/alarm_arm, Stay:/alarm_stay, Disarm:/alarm_off"
      - "Garage Auto-Open:/garage_open, Garage Auto-Close:/garage_close"
      - "Status:/status, Cancel:/cancel"
#
- alias: telegram_bot_garage_open
  initial_state: true
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: '/garage_open'
  action:
  - service: telegram_bot.delete_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
  - service: input_boolean.turn_on
    entity_id: input_boolean.garage_auto_opener
#
- alias: telegram_bot_garage_close
  initial_state: true
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: '/garage_close'
  action:
  - service: telegram_bot.delete_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
  - service: script.garage_close_and_arm_alarm
#
- alias: telegram_bot_cancel
  initial_state: true
  trigger:
  - platform: event
    event_type: telegram_callback
    event_data:
      data: '/cancel'
  action:
  - service: telegram_bot.answer_callback_query
    data_template:
      callback_query_id: '{{ trigger.event.data.id }}'
      message: "Your (cancel) request is my command"
  - service: telegram_bot.delete_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
#
- alias: telegram_bot_camera_1
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/cam1"
  action:
  - service: telegram_bot.answer_callback_query
    data_template:
      callback_query_id: '{{ trigger.event.data.id }}'
      message: 'Inside camera image coming your way'
  - service: telegram_bot.delete_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
  - service: telegram_bot.send_photo
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      url: http://192.168.25.22/image/jpeg.cgi
      username: admin
      password: !secret camera_password
  - service: logbook.log
    data_template:
      name: "*Telegram Bot*"
      message: "Inside camera requested by {{ trigger.event.data.from_first }} {{ trigger.event.data.from_last }}"
#
- alias: telegram_bot_camera_2
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/cam2"
  action:
  - service: telegram_bot.answer_callback_query
    data_template:
      callback_query_id: '{{ trigger.event.data.id }}'
      message: 'Garden camera image coming your way'
  - service: telegram_bot.delete_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
  - service: telegram_bot.send_photo
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      url: http://192.168.25.31/ISAPI/Streaming/channels/1/picture
      username: !secret hikvision_username
      password: !secret hikvision_password
  - service: logbook.log
    data_template:
      name: "*Telegram Bot*"
      message: "Garden camera requested by {{ trigger.event.data.from_first }} {{ trigger.event.data.from_last }}"
#
- alias: telegram_bot_camera_3
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/cam3"
  action:
  - service: telegram_bot.answer_callback_query
    data_template:
      callback_query_id: '{{ trigger.event.data.id }}'
      message: 'Driveway camera image coming your way'
  - service: telegram_bot.delete_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
  - service: telegram_bot.send_photo
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      url: http://192.168.25.32/ISAPI/Streaming/channels/1/picture
      username: !secret hikvision_username
      password: !secret hikvision_password
  - service: logbook.log
    data_template:
      name: "*Telegram Bot*"
      message: "Driveway camera requested by {{ trigger.event.data.from_first }} {{ trigger.event.data.from_last }}"
#
- alias: telegram_bot_camera_4
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/cam4"
  action:
  - service: telegram_bot.answer_callback_query
    data_template:
      callback_query_id: '{{ trigger.event.data.id }}'
      message: 'Garage camera image coming your way'
  - service: telegram_bot.delete_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
  - service: telegram_bot.send_photo
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      url: http://192.168.25.21/image/jpeg.cgi
      username: admin
      password: !secret camera_password
  - service: logbook.log
    data_template:
      name: "*Telegram Bot*"
      message: "Garage camera requested by {{ trigger.event.data.from_first }} {{ trigger.event.data.from_last }}"
#
- alias: telegram_bot_status
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/status"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "*==Current system status==* \n
        Alarm status is {{ states.sensor.alarm_arm_mode.state }} \n
        Power source is {{ states.sensor.axpert_source.state }} \n
        Power usage is {{ states.sensor.axpert_outw.state_with_unit }} \n
        Battery level is {{ states.sensor.axpert_battp.state_with_unit }} \n
        Morning lights {% if is_state('input_boolean.enable_morning_light','on') %}Enabled{% else %}Disabled{% endif %} \n
        Geyser timer {% if is_state('automation.geyser_on_from_set_time','on') %}Enabled{% else %}Disabled{% endif %} \n
        Poolpump timer {% if is_state('automation.pool_pump_on_for_conditions','on') %}Enabled{% else %}Disabled{% endif %} \n
        "
#
- alias: telegram_bot_inverter_set_grid
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/invertersetgrid"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Setting inverter output from Grid..."
  - service: script.axpert_change_source_grid
#
- alias: telegram_bot_inverter_set_solar
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/invertersetsolar"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Setting inverter output from Solar..."
  - service: script.axpert_change_source_solar
#
- alias: telegram_bot_inverter_charge_from_grid
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/chargegrid"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Setting inverter charge source to Grid..."
  - service: script.axpert_charge_source_grid
#
- alias: telegram_bot_inverter_charge_from_solar
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/chargesolarfirst"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Setting inverter charge source to Solar..."
  - service: script.axpert_charge_source_solar
#
- alias: telegram_bot_inverter_charge_from_both
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/chargeboth"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Setting inverter charge source to Grid and Solar..."
  - service: script.axpert_charge_source_both
#
- alias: telegram_bot_inverter_charge_from_solar_only
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/chargesolaronly"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Setting inverter charge source to Solar Only..."
  - service: script.axpert_charge_source_solar_only
#
- alias: telegram_bot_alarm_arm
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/alarm_arm"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Arming the alarm..."
  - service: script.paradox_status_arm
  - service: logbook.log
    data:
      name: "Paradox Alarm"
      message: "Arm via Telegram"
      entity_id: binary_sensor.alarm_status
      domain: binary_sensor
#
- alias: telegram_bot_alarm_stay
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/alarm_stay"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Staying the alarm..."
  - service: script.paradox_status_stay
  - service: logbook.log
    data:
      name: "Paradox Alarm"
      message: "Stay via Telegram"
      entity_id: binary_sensor.alarm_status
      domain: binary_sensor
#
- alias: telegram_bot_alarm_disarm
  initial_state: true
  trigger:
    platform: event
    event_type: telegram_callback
    event_data:
      data: "/alarm_off"
  action:
  - service: telegram_bot.edit_message
    data_template:
      message_id: '{{ trigger.event.data.message.message_id }}'
      chat_id: '{{ trigger.event.data.user_id }}'
      inline_keyboard: []
      message: "Disarming the alarm..."
  - service: script.paradox_status_disarm
  - service: logbook.log
    data:
      name: "Paradox Alarm"
      message: "Disarm via Telegram"
      entity_id: binary_sensor.alarm_status
      domain: binary_sensor
#
#########################################################################################################

##################### Switch Node 1 ###########################
- alias: "z button sw1-1"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw1-1", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 1 button 1" } }
#
- alias: "z button sw1-2"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw1-2", payload: "s" }
  action: { service: light.toggle, entity_id: light.kitchen }
#
- alias: "z button sw1-3"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw1-3", payload: "s" }
  action: { service: light.toggle, entity_id: light.kitchen_downlights }
#
- alias: "z button sw1-4"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw1-4", payload: "s" }
  action: { service: light.toggle, entity_id: light.dining_room }
#
- alias: "z button sw1-5"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw1-5", payload: "s" }
  action: { service: light.toggle, entity_id: light.scullary }
#
- alias: "z button sw1-6"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw1-6", payload: "s" }
  action: { service: light.toggle, entity_id: light.back_door }
#
##################### Switch Node 2 ###########################
- alias: "z button sw2-1"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw2-1", payload: "s" }
  action: { service: light.toggle, entity_id: light.patio }
#
- alias: "z button sw2-2"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw2-2", payload: "s" }
  action: { service: light.toggle, entity_id: light.garden }
#
- alias: "z button sw2-3"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw2-3", payload: "s" }
  action: { service: light.toggle, entity_id: light.lounge }
#
- alias: "z button sw2-4"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw2-4", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 2 button 4" } }
#
- alias: "z button sw2-5"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw2-5", payload: "s" }
  action: { service: light.toggle, entity_id: light.bathroom }
#
- alias: "z button sw2-6"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw2-6", payload: "s" }
  action: { service: light.toggle, entity_id: light.study }
#
##################### Switch Node 3 ###########################
- alias: "z button sw3-1"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw3-1", payload: "s" }
  action: { service: light.toggle, entity_id: light.spare_room }
#
- alias: "z button sw3-2"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw3-2", payload: "s" }
  action: { service: light.toggle, entity_id: light.passage }
#
- alias: "z button sw3-3"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw3-3", payload: "s" }
  action: { service: light.toggle, entity_id: light.en_suite }
#
- alias: "z button sw3-4"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw3-4", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 3 button 4" } }
#
- alias: "z button sw3-5"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw3-5", payload: "s" }
  action: { service: light.toggle, entity_id: light.bedroom }
#
- alias: "z button sw3-6"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw3-6", payload: "s" }
  action: { service: light.toggle, entity_id: light.en_suite }
#
##################### Switch Node 4 ###########################
- alias: "z button sw4-1"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw4-1", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 4 button 1" } }
#  action: { service: light.toggle, entity_id: light.en_suite }
#
- alias: "z button sw4-2"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw4-2", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 4 button 2" } }
#  action: { service: light.toggle, entity_id: light.en_suite }
#
- alias: "z button sw4-3"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw4-3", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 4 button 3" } }
#  action: { service: light.toggle, entity_id: light.en_suite }
#
- alias: "z button sw4-4"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw4-4", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 4 button 4" } }
#  action: { service: light.toggle, entity_id: light.en_suite }
#
- alias: "z button sw4-5"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw4-5", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 4 button 5" } }
#  action: { service: light.toggle, entity_id: light.en_suite }
#
- alias: "z button sw4-6"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/sw4-6", payload: "s" }
  action: { service: telegram_bot.send_message, data: { target: !secret telegram_userid_1, message: "switch 4 button 6" } }
#  action: { service: light.toggle, entity_id: light.en_suite }
#
################################################
- alias: "z button d03-1 short"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/b/d03-1", payload: "s" }
  action: { service: switch.toggle, entity_id: switch.geyser }
#
- alias: "z button d04-1 short"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/b/d04-1", payload: "s" }
  action: { service: switch.toggle, entity_id: switch.pool_pump }
#
- alias: "z button d04-2 short"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/b/d04-2", payload: "s" }
  action: { service: light.toggle, entity_id: light.pool }
#
- alias: "z button d06-1 short"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/b/d06-1", payload: "s" }
  action: { service: light.toggle, entity_id: light.bed_lamp }
#
- alias: "z button d09-1"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/b/d09-1", payload: "s" }
  action: { service: light.toggle, entity_id: light.tester }
#
- alias: "z toggle d09-1"
  initial_state: true
  trigger: { platform: mqtt, topic: "ha/e/t/d09-1", payload: "s" }
  action: { service: light.toggle, entity_id: light.tester }
#